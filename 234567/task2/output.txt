.global main
.data
space: .string " "
newline: .string "\n"
.text

.macro    PushImm        $number
    li          t5, $number
    sw          t5, (sp)
    addi        sp, sp, -4
.end_macro

.macro    PushReg        $reg
    sw          $reg, (sp)
    addi        sp, sp, -4
.end_macro

.macro    PopReg        $reg
    lw          $reg, 4(sp)
    addi        sp, sp, 4
.end_macro

.macro    Discard        $bytes
    addi        sp, sp, $bytes
.end_macro

.macro    Popt1t2
    lw          t1, 4(sp)
    addi        sp, sp, 4
    lw          t2, 4(sp)
    addi        sp, sp, 4
.end_macro

.macro    Pop1
    lw          t4, 4(sp)
    addi        sp, sp, 4
.end_macro

.macro CompGE
    Popt1t2
    li          t0, 1
    sw          t0, (sp)
    ble         t2, t1, exit
    sw          zero, (sp)
exit:
    addi        sp, sp, -4
.end_macro

.macro CompLE
    Popt1t2
    li          t0, 1
    sw          t0, (sp)
    ble         t1, t2, exit
    sw          zero, (sp)
exit:
    addi        sp, sp, -4
.end_macro

.macro CompL
    Popt1t2
    li          t0, 1
    sw          t0, (sp)
    blt         t1, t2, exit
    sw          zero, (sp)
exit:
    addi        sp, sp, -4
.end_macro

.macro Equal
    Popt1t2
    li          t0, 1
    sw          t0, (sp)
    beq         t1, t2, exit
    sw          zero, (sp)
exit:
    addi        sp, sp, -4
.end_macro

.macro CompG
    Popt1t2
    li          t0, 1
    sw          t0, (sp)
    blt         t2, t1, exit
    sw          zero, (sp)
exit:
    addi        sp, sp, -4
.end_macro

.macro    Plus
    Popt1t2
    add         t1, t1, t2
    sw          t1, (sp)
    addi        sp, sp, -4
.end_macro

.macro    Minus
    Popt1t2
    sub         t1, t1, t2
    sw          t1, (sp)
    addi        sp, sp, -4
.end_macro

.macro    Multiply
    Popt1t2
    mul         t1, t1, t2
    sw          t1, (sp)
    addi        sp, sp, -4
.end_macro

.macro    Divide
    Popt1t2
    div         t1, t1, t2
    sw          t1, (sp)
    addi        sp, sp, -4
.end_macro

.macro    LogicalAnd
    Popt1t2
    and         t1, t1, t2
    sw          t1, (sp)
    addi        sp, sp, -4
.end_macro

.macro    LogicalXor
    Popt1t2
    xor         t1, t1, t2
    sw          t1, (sp)
    addi        sp, sp, -4
.end_macro

.macro    Jump        $address
    j           $address
.end_macro

.macro    JumpTrue    $address
    lw          t1, 4(sp)
    addi        sp, sp, 4
    beqz        t1, exit
    j           $address
exit:
.end_macro
main:
    lw          ra, 4(sp)
    addi        sp, sp, 4
    lw          x18, 4(sp)
    addi        sp, sp, 4
    addi        sp, sp, 4
if_0:
    PushImm     0
    PushReg     x18
    CompL
    PushImm 1
    Equal
    JumpTrue   else_1
    PushImm     1
    lw          a0, 4(sp)
    li          a7, 1
    ecall
    Pop1
    Jump        endif_2
else_1:
    PushReg     x18
    lw          a0, 4(sp)
    li          a7, 1
    ecall
    Pop1
endif_2:
    PushReg     x18
    ret
